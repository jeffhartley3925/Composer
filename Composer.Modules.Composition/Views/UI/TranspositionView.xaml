<Canvas 
    xmlns:toolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit"  
    x:Class="Composer.Modules.Composition.Views.TranspositionView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
    xmlns:cmd="clr-namespace:Microsoft.Practices.Composite.Presentation.Commands;assembly=Microsoft.Practices.Composite.Presentation"
    xmlns:behavior="clr-namespace:Composer.Infrastructure.Behavior;assembly=Composer.Infrastructure"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" Loaded="Canvas_Loaded">

    <Canvas.Resources>

        <Storyboard x:Name="FadeInStoryboard">
            <DoubleAnimation
				Storyboard.TargetName="LayoutRoot"
				Storyboard.TargetProperty="Opacity"
				From="0.0" To="1.0" Duration="0:0:.5"></DoubleAnimation>
        </Storyboard>

        <Storyboard RepeatBehavior="2x" x:Name="BorderStoryboard" AutoReverse="False">
            <DoubleAnimation Storyboard.TargetName="rt1"
                 Storyboard.TargetProperty="Angle"
                 Duration="0:0:2"
                 By="360"/>
            <DoubleAnimation Storyboard.TargetName="gs1"
                 Storyboard.TargetProperty="Offset"
                 Duration="0:0:3"
                 To="0"/>
            <ColorAnimation Storyboard.TargetName="gs2"
                 Storyboard.TargetProperty="Color"
                 Duration="0:0:1"
                 To="DarkGray"/>
        </Storyboard>

        <SolidColorBrush x:Key="CaptionBlueBackground">#3b5998</SolidColorBrush>
        <SolidColorBrush x:Key="CaptionBlueBorder">#1a3c6c</SolidColorBrush>
        <SolidColorBrush x:Key="CaptionText">#ffffff</SolidColorBrush>
        <SolidColorBrush x:Key="CaptionForeground">#ffffff</SolidColorBrush>
        <SolidColorBrush x:Key="DialogBorder">#999999</SolidColorBrush>
        <SolidColorBrush x:Key="FooterBackground">#1a3c6c</SolidColorBrush>
        <SolidColorBrush x:Key="FooterBorder">#dadada</SolidColorBrush>

    </Canvas.Resources>

    <Border Visibility="{Binding Visible}" Margin="0" BorderThickness="3" x:Name="LayoutRoot">

        <Border.BorderBrush>
            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                <LinearGradientBrush.RelativeTransform>
                    <RotateTransform x:Name="rt1" CenterX=".5" CenterY=".5"/>
                </LinearGradientBrush.RelativeTransform>
                <GradientStop Color="{Binding DialogBorder}" Offset="0.9" x:Name="gs1"/>
                <GradientStop Color="#325c99" Offset="0.9" x:Name="gs2"/>
            </LinearGradientBrush>
        </Border.BorderBrush>

        <Grid Background="White">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"></ColumnDefinition>
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition x:Name="Header" Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition x:Name="Footer" Height="Auto"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
            </Grid.RowDefinitions>

            <Border Grid.Row="0" BorderThickness="1" BorderBrush="{StaticResource CaptionBlueBorder}" Background="{StaticResource CaptionBlueBackground}">
                <Grid Background="Transparent">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"></RowDefinition>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Row="0" Grid.Column="0" Margin="10,7" Foreground="{StaticResource CaptionForeground}" FontWeight="Bold" FontSize="14" Text="Transpose Key"/>
                </Grid>
            </Border>

            <Grid Grid.Row="1">

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                </Grid.RowDefinitions>

                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                </Grid.ColumnDefinitions>

                <Border Grid.Column="0" Grid.Row="0" Margin="10,10,5,5" BorderThickness="1" BorderBrush="LightGray" Width="Auto" Height="Auto">
                    <StackPanel>
                        <CheckBox IsChecked="{Binding OctaveTranspositionChecked, Mode=TwoWay}" Margin="10,5,10,5" x:Name="EnableOctaveTransposition"  Content="Transpose to another Octave">
                            <i:Interaction.Triggers>

                                <i:EventTrigger EventName="Unchecked">
                                    <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding TransposeOctaveUncheckedCommand}"
					                    CommandParameter="{Binding ElementName=EnableOctaveTransposition}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="Checked">
                                    <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding TransposeOctaveCheckedCommand}"
					                    CommandParameter="{Binding ElementName=EnableOctaveTransposition}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </CheckBox>
                        <CheckBox IsChecked="{Binding KeyTranspositionChecked, Mode=TwoWay}" Margin="10,5,10,5" x:Name="EnableKeyTransposition" Content="Transpose to another Key">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Unchecked">
                                    <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding TransposeKeyUncheckedCommand}"
					                    CommandParameter="{Binding ElementName=EnableKeyTransposition}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="Checked">
                                    <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding TransposeKeyCheckedCommand}"
					                    CommandParameter="{Binding ElementName=EnableKeyTransposition}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </CheckBox>
                        <CheckBox IsChecked="{Binding IntervalTranspositionChecked, Mode=TwoWay}" Margin="10,5,10,5" x:Name="EnableIntervalTransposition" Content="Transpose by Interval">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Unchecked">
                                    <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding TransposeIntervalUncheckedCommand}"
					                    CommandParameter="{Binding ElementName=EnableIntervalTransposition}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="Checked">
                                    <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding TransposeIntervalCheckedCommand}"
					                    CommandParameter="{Binding ElementName=EnableIntervalTransposition}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </CheckBox>
                    </StackPanel>

                </Border>

                <Border Grid.Column="1" Grid.Row="0" Margin="5,10,10,5" BorderThickness="1" BorderBrush="LightGray" Width="Auto" Height="Auto">
                    <StackPanel>
                        <RadioButton x:Name="OctaveUpRadioButton" Margin="10,8,10,5" IsEnabled="{Binding OctaveTranspositionEnabled}">
                            <RadioButton.Content>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Up 1 Octave."/>
                                </StackPanel>
                            </RadioButton.Content>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Unchecked">
                                    <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding OctaveUpUncheckedCommand}"
					                    CommandParameter="{Binding ElementName=OctaveUpRadioButton}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="Checked">
                                    <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding OctaveUpCheckedCommand}"
					                    CommandParameter="{Binding ElementName=OctaveUpRadioButton}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </RadioButton>
                        <RadioButton x:Name="OctaveDownRadioButton" Margin="10,5,10,8" IsEnabled="{Binding OctaveTranspositionEnabled}">
                            <RadioButton.Content>
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="Down 1 Octave."/>
                                </StackPanel>
                            </RadioButton.Content>
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Unchecked">
                                    <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding OctaveDownUncheckedCommand}"
					                    CommandParameter="{Binding ElementName=OctaveDownRadioButton}"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="Checked">
                                    <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding OctaveDownCheckedCommand}"
					                    CommandParameter="{Binding ElementName=OctaveDownRadioButton}"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                        </RadioButton>
                    </StackPanel>

                </Border>

                <Border Grid.Column="0" Grid.Row="2" Margin="10,5,5,10" BorderThickness="1" BorderBrush="LightGray" Width="Auto" Height="Auto">
                    <Grid>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"></RowDefinition>
                            <RowDefinition Height="Auto"></RowDefinition>
                            <RowDefinition Height="Auto"></RowDefinition>
                        </Grid.RowDefinitions>

                        <StackPanel Margin="10,5,10,5" HorizontalAlignment="Center" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2" Orientation="Horizontal">
                            <TextBlock Text="The Current Key is "></TextBlock>
                            <TextBlock Text="{Binding CurrentKey.Name}"></TextBlock>
                            <TextBlock Text="."></TextBlock>
                        </StackPanel>

                        <TextBlock HorizontalAlignment="Center" Margin="10,5,10,5" Grid.Column="0" Grid.Row="1" Text="Select a New Key..."></TextBlock>

                        <ComboBox Margin="10,5,10,10" IsEnabled="{Binding KeyTranspositionEnabled}" Width="Auto" Height="Auto" Grid.Column="0" Grid.Row="2" Opacity=".65"
                          Name="keyComboBox" HorizontalAlignment="Center"
                          ItemsSource="{Binding Path=Keys, Mode=OneWay}"
                          Style="{StaticResource DimensionComboBox}"
                          SelectedValue="{Binding Path=SelectedKey, Mode=TwoWay}">
                            <ToolTipService.ToolTip>
                                <ToolTip Content="Select a Key to Transpose to"></ToolTip>
                            </ToolTipService.ToolTip>
                            <ComboBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal">

                                    </StackPanel>
                                </ItemsPanelTemplate>
                            </ComboBox.ItemsPanel>
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid Margin="5,0,5,0">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="68"></RowDefinition>
                                            <RowDefinition Height="12"></RowDefinition>
                                            <RowDefinition Height="2"></RowDefinition>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                                        </Grid.ColumnDefinitions>
                                        <StackPanel Grid.Row="0" HorizontalAlignment="Center" Orientation="Horizontal">
                                            <StackPanel HorizontalAlignment="Center" Margin="10,-17,10,0" Orientation="Horizontal">
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Sharp,1'}" Margin="-2,-2,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='SharpVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Sharp,2'}" Margin="-1,9,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='SharpVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Sharp,3'}" Margin="-1,-5,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='SharpVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Sharp,4'}" Margin="-1,6,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='SharpVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Sharp,5'}" Margin="-1,17,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='SharpVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Sharp,6'}" Margin="-1,2,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='SharpVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Sharp,7'}" Margin="-1,13,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='SharpVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Flat,1'}" Margin="0,-2,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='FlatVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Flat,2'}" Margin="0,9,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='FlatVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Flat,3'}" Margin="0,-5,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='FlatVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Flat,4'}" Margin="0,6,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='FlatVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Flat,5'}" Margin="0,17,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='FlatVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Flat,6'}" Margin="0,2,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='FlatVectorId'}"/>
                                                <Path Visibility="{Binding Id,Converter = {StaticResource keyToVisibilityConverter}, ConverterParameter='Flat,7'}" Margin="0,13,0,0" Fill="#000000" Data="{Binding Id,Converter ={StaticResource inputIdToValueConverter}, ConverterParameter='FlatVectorId'}"/>
                                            </StackPanel>
                                            <Rectangle Width="5" Height="1" Fill="Transparent"/>
                                        </StackPanel>
                                        <TextBlock FontFamily="Lucida Sans Unicode" Grid.Row="1" HorizontalAlignment="Center" FontSize="9" Text="{Binding Caption}"/>
                                    </Grid>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </Grid>
                </Border>

                <Border Grid.Column="1" Grid.Row="1" Grid.RowSpan="2" Margin="5,5,10,10" BorderThickness="1" BorderBrush="LightGray" Width="Auto" Height="Auto">
                    <Grid>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"></RowDefinition>
                        </Grid.RowDefinitions>

                        <StackPanel Margin="10" Grid.Column="0" Grid.Row="0" Orientation="Horizontal">
                            <RadioButton x:Name="IntervalUpRadioButton" Margin="0,6,0,0" IsEnabled="{Binding IntervalTranspositionEnabled}">
                                <RadioButton.Content>
                                    <TextBlock Text="Up "/>
                                </RadioButton.Content>

                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Unchecked">
                                        <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding IntervalUpUncheckedCommand}"
					                    CommandParameter="{Binding ElementName=IntervalUpRadioButton}"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="Checked">
                                        <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding IntervalUpCheckedCommand}"
					                    CommandParameter="{Binding ElementName=IntervalUpRadioButton}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>

                            </RadioButton>
                            <RadioButton x:Name="IntervalDownRadioButton" Margin="0,6,0,0" IsEnabled="{Binding IntervalTranspositionEnabled}">
                                <RadioButton.Content>
                                    <TextBlock Text="Down"/>
                                </RadioButton.Content>
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="Unchecked">
                                        <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding IntervalDownUncheckedCommand}"
					                    CommandParameter="{Binding ElementName=IntervalDownRadioButton}"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="Checked">
                                        <behavior:ExtendedInvokeCommandAction
					                    Command="{Binding IntervalDownCheckedCommand}"
					                    CommandParameter="{Binding ElementName=IntervalDownRadioButton}"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </RadioButton>
                        </StackPanel>

                        <TextBlock Margin="0,17,0,0" Grid.Column="1" Grid.Row="0" Text="a"/>

                        <ComboBox Margin="10,10,10,10" IsEnabled="{Binding IntervalTranspositionEnabled}" Width="Auto" Height="Auto" Grid.Column="2" Grid.Row="0"
                          Name="intervalComboBox" HorizontalAlignment="Center"
                          ItemsSource="{Binding Path=Intervals, Mode=OneWay}"
                          SelectedValue="{Binding Path=SelectedInterval, Mode=TwoWay}">
                            <ToolTipService.ToolTip>
                                <ToolTip Content="Select a Interval to Transpose to"></ToolTip>
                            </ToolTipService.ToolTip>
                            <ComboBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Vertical">

                                    </StackPanel>
                                </ItemsPanelTemplate>
                            </ComboBox.ItemsPanel>
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid Margin="5,0,5,0">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"></RowDefinition>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                                        </Grid.ColumnDefinitions>

                                        <TextBlock Foreground="#333333" FontFamily="Lucida Sans Unicode" Grid.Row="0" Grid.Column="0" HorizontalAlignment="Center" FontSize="11" Text="{Binding Name}"/>
                                    </Grid>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>

                    </Grid>
                </Border>
            </Grid>

            <Border Grid.Row="2" HorizontalAlignment="Stretch" BorderThickness="1" BorderBrush="{StaticResource FacebookGrayBoxBorder}" Background="{StaticResource FacebookGrayBoxBackground}">
                <Grid>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                    </Grid.ColumnDefinitions>

                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"></RowDefinition>
                    </Grid.RowDefinitions>

                    <Button Grid.Column="0" BorderBrush="{StaticResource FacebookLikeButtonBorder}" Margin="10" cmd:Click.Command ="{Binding TransposeButtonClickedCommand}" cmd:Click.CommandParameter="" Style="{StaticResource PlainButton}" x:Name="TransposeButton">
                        <Button.Content>
                            <TextBlock 
                                Margin="10,0,10,0"
                                FontFamily="{StaticResource FontName}" 
                                FontSize="12" 
                                Foreground="{StaticResource FacebookLikeButtonForeground}" 
                                Text="Transpose"/>
                        </Button.Content>
                    </Button>

                    <Button Grid.Column="1" BorderBrush="{StaticResource FacebookLikeButtonBorder}" Margin="10" cmd:Click.Command ="{Binding CancelButtonClickedCommand}" cmd:Click.CommandParameter="" Style="{StaticResource PlainButton}" x:Name="CancelButton">
                        <Button.Content>
                            <TextBlock 
                                Margin="10,0,10,0"
                                FontFamily="{StaticResource FontName}" 
                                FontSize="12" 
                                Foreground="{StaticResource FacebookLikeButtonForeground}" 
                                Text="Cancel"/>
                        </Button.Content>
                    </Button>

                    <Border Grid.Column="2" Grid.Row="0" Margin="50,7,0,0" BorderThickness="0" BorderBrush="LightGray" Width="Auto" Height="Auto">
                        <Grid>

                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                            </Grid.ColumnDefinitions>

                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                            </Grid.RowDefinitions>
                            
                            <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Horizontal">
                                <TextBlock Text="Current Key: " FontFamily="{StaticResource FontName}" FontSize="10" Foreground="#3b5998"></TextBlock>
                                <TextBlock Text="{Binding CurrentKey.Name}" FontFamily="{StaticResource FontName}" FontSize="10" Foreground="#3b5998"></TextBlock>
                            </StackPanel>
                            
                            <StackPanel Margin="15,0,0,0" Grid.Row="1" Grid.Column="1" Orientation="Horizontal">
                                <TextBlock Text="Interval: " FontFamily="{StaticResource FontName}" FontSize="10" Foreground="#3b5998"></TextBlock>
                                <TextBlock Text="{Binding Interval}" FontFamily="{StaticResource FontName}" FontSize="10" Foreground="#3b5998"></TextBlock>
                                <TextBlock Text=" (" FontFamily="{StaticResource FontName}" FontSize="10" Foreground="#3b5998"></TextBlock>
                                <TextBlock Text="{Binding RawInterval}" FontFamily="{StaticResource FontName}" FontSize="10" Foreground="#3b5998"></TextBlock>
                                <TextBlock Text=") " FontFamily="{StaticResource FontName}" FontSize="10" Foreground="#3b5998"></TextBlock>
                            </StackPanel>
                            
                            <StackPanel Grid.Row="1" Grid.Column="0" Orientation="Horizontal">
                                <TextBlock Text="Direction: " FontFamily="{StaticResource FontName}" FontSize="10" Foreground="#3b5998"></TextBlock>
                                <TextBlock Text="{Binding Direction}" FontFamily="{StaticResource FontName}" FontSize="10" Foreground="#3b5998"></TextBlock>
                            </StackPanel>

                            <StackPanel Margin="15,0,0,0" Grid.Row="0" Grid.Column="1" Orientation="Horizontal">
                                <TextBlock Text="New Key: " FontFamily="{StaticResource FontName}" FontSize="10" Foreground="#3b5998"></TextBlock>
                                <TextBlock Text="{Binding TargetKeyName}" FontFamily="{StaticResource FontName}" FontSize="10" Foreground="#3b5998"></TextBlock>
                            </StackPanel>
                            
                        </Grid>
                        
                    </Border>
                    
                </Grid>
            </Border>

            <ListBox Grid.Row="3" BorderBrush="#3b5998" BorderThickness="1" Margin="5" Height="142" ScrollViewer.VerticalScrollBarVisibility="Visible" FontSize="10" Width="Auto" Visibility="{Binding TranspositionDetailsVisibility}" ItemsSource="{Binding TransData}">
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel>

                        </StackPanel>
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"></RowDefinition>
                                <RowDefinition Height="Auto"></RowDefinition>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="45"></ColumnDefinition>
                                <ColumnDefinition Width="45"></ColumnDefinition>
                                <ColumnDefinition Width="50"></ColumnDefinition>
                                <ColumnDefinition Width="50"></ColumnDefinition>
                                <ColumnDefinition Width="30"></ColumnDefinition>
                                <ColumnDefinition Width="30"></ColumnDefinition>
                                <ColumnDefinition Width="55"></ColumnDefinition>
                                <ColumnDefinition Width="55"></ColumnDefinition>
                            </Grid.ColumnDefinitions>

                            <TextBlock Grid.Row="0" Grid.Column="0" Text="{Binding StartPitch}"></TextBlock>
                            <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding EndPitch}"></TextBlock>
                            <TextBlock Grid.Row="0" Grid.Column="2" Text="{Binding StartOctave}"></TextBlock>
                            <TextBlock Grid.Row="0" Grid.Column="3" Text="{Binding EndOctave}"></TextBlock>
                            <TextBlock Grid.Row="0" Grid.Column="4" Text="{Binding Start_Y}"></TextBlock>
                            <TextBlock Grid.Row="0" Grid.Column="5" Text="{Binding End_Y}"></TextBlock>
                            <TextBlock Grid.Row="0" Grid.Column="6" Text="{Binding StartSlot}"></TextBlock>
                            <TextBlock Grid.Row="0" Grid.Column="7" Text="{Binding EndSlot}"></TextBlock>
                            <TextBlock Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="8" Text="{Binding Message}"></TextBlock>
                        </Grid>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>

        </Grid>
        <Border.Effect>
            <DropShadowEffect BlurRadius="20" Direction="320" ShadowDepth="4" Color="#aaaaaa" />
        </Border.Effect>
    </Border>
</Canvas>
