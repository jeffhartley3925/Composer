ACTION: Application Load
	OnAdjustMeasureWidth()
		{
			var action = Preferences.MeasureArrangeMode;
			Preferences.MeasureArrangeMode = _Enum.MeasureArrangeMode.IncreaseMeasureSpacing;
			EditorState.NoteSpacingRatio = maxWidthInSequence / (double)proposedWidth;
			EA.GetEvent<ArrangeMeasure>().Publish(Measure);
			EditorState.NoteSpacingRatio = 1;
			Preferences.MeasureArrangeMode = action;
		}
	OnArrangeMeasure()
		case _Enum.MeasureArrangeMode.IncreaseMeasureSpacing:
			m.Spacing = Convert.ToInt32(Math.Ceiling((int.Parse(_measure.Width) - Infrastructure.Constants.Measure.Padding * 2) / chords.Count));
			_ea.GetEvent<MeasureLoaded>().Publish(_measure.Id);
			break;


ACTION: Manual Resize of Measure
	AdjustContent()
	    if (ActiveChords.Count > 0)
        {
            if (MeasureManager.IsPacked(Measure))
            {
                Preferences.MeasureArrangeMode = _Enum.MeasureArrangeMode.ManualResizePacked;
                EA.GetEvent<ArrangeMeasure>().Publish(Measure);
                Preferences.MeasureArrangeMode = currentAction;
            }
            else
            {
                Preferences.MeasureArrangeMode = _Enum.MeasureArrangeMode.ManualResizeNotPacked;
                EA.GetEvent<ArrangeMeasure>().Publish(Measure);
                var chord = (from c in ActiveChords select c).OrderBy(p => p.StartTime).Last();
                if (chord.Location_X + Preferences.MeasureMaximumEditingSpace > Width)
                {
                    AdjustTrailingSpace(Preferences.MeasureMaximumEditingSpace);
                }
                Preferences.MeasureArrangeMode = currentAction;
            }
        }







empty measures in a new composition all have the same width.
as notes are added/removed to/from a measure, increase/decrease the width of the measure as needed.
when resizing a packed or unpacked measure manually, adjust measure content proportionally.






















