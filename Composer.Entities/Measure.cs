//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Composer.Entities
{
    public partial class Measure
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual System.Guid Staff_Id
        {
            get { return _staff_Id; }
            set
            {
                if (_staff_Id != value)
                {
                    if (Staff != null && Staff.Id != value)
                    {
                        Staff = null;
                    }
                    _staff_Id = value;
                }
            }
        }
        private System.Guid _staff_Id;
    
        public virtual Nullable<int> TimeSignature_Id
        {
            get;
            set;
        }
    
        public virtual int Instrument_Id
        {
            get;
            set;
        }
    
        public virtual short Bar_Id
        {
            get;
            set;
        }
    
        public virtual short Key_Id
        {
            get;
            set;
        }
    
        public virtual string Width
        {
            get;
            set;
        }
    
        public virtual decimal Duration
        {
            get;
            set;
        }
    
        public virtual string LedgerColor
        {
            get;
            set;
        }
    
        public virtual int Sequence
        {
            get;
            set;
        }
    
        public virtual short Index
        {
            get;
            set;
        }
    
        public virtual int Spacing
        {
            get;
            set;
        }
    
        public virtual string Status
        {
            get;
            set;
        }

        #endregion

        #region Complex Properties
    
        public virtual Audit Audit
        {
            get { return _audit; }
            set { _audit = value; }
        }
        private Audit _audit = new Audit();

        #endregion

        #region Navigation Properties
    
        public virtual Staff Staff
        {
            get { return _staff; }
            set
            {
                if (!ReferenceEquals(_staff, value))
                {
                    var previousValue = _staff;
                    _staff = value;
                    FixupStaff(previousValue);
                }
            }
        }
        private Staff _staff;
    
        public virtual ICollection<Chord> Chords
        {
            get
            {
                if (_chords == null)
                {
                    var newCollection = new FixupCollection<Chord>();
                    newCollection.CollectionChanged += FixupChords;
                    _chords = newCollection;
                }
                return _chords;
            }
            set
            {
                if (!ReferenceEquals(_chords, value))
                {
                    var previousValue = _chords as FixupCollection<Chord>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupChords;
                    }
                    _chords = value;
                    var newValue = value as FixupCollection<Chord>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupChords;
                    }
                }
            }
        }
        private ICollection<Chord> _chords;

        #endregion

        #region Association Fixup
    
        private void FixupStaff(Staff previousValue)
        {
            if (previousValue != null && previousValue.Measures.Contains(this))
            {
                previousValue.Measures.Remove(this);
            }
    
            if (Staff != null)
            {
                if (!Staff.Measures.Contains(this))
                {
                    Staff.Measures.Add(this);
                }
                if (Staff_Id != Staff.Id)
                {
                    Staff_Id = Staff.Id;
                }
            }
        }
    
        private void FixupChords(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Chord item in e.NewItems)
                {
                    item.Measure = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Chord item in e.OldItems)
                {
                    if (ReferenceEquals(item.Measure, this))
                    {
                        item.Measure = null;
                    }
                }
            }
        }

        #endregion

    }
}
