//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Composer.Entities
{
    public partial class Composition
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual int Instrument_Id
        {
            get;
            set;
        }
    
        public virtual int Key_Id
        {
            get;
            set;
        }
    
        public virtual int TimeSignature_Id
        {
            get;
            set;
        }
    
        public virtual string Status
        {
            get;
            set;
        }
    
        public virtual short StaffConfiguration
        {
            get;
            set;
        }
    
        public virtual string Flags
        {
            get { return _flags; }
            set { _flags = value; }
        }
        private string _flags = "00000000";

        #endregion

        #region Complex Properties
    
        public virtual Provenance Provenance
        {
            get { return _provenance; }
            set { _provenance = value; }
        }
        private Provenance _provenance = new Provenance();
    
        public virtual Audit Audit
        {
            get { return _audit; }
            set { _audit = value; }
        }
        private Audit _audit = new Audit();

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Staffgroup> Staffgroups
        {
            get
            {
                if (_staffgroups == null)
                {
                    var newCollection = new FixupCollection<Staffgroup>();
                    newCollection.CollectionChanged += FixupStaffgroups;
                    _staffgroups = newCollection;
                }
                return _staffgroups;
            }
            set
            {
                if (!ReferenceEquals(_staffgroups, value))
                {
                    var previousValue = _staffgroups as FixupCollection<Staffgroup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupStaffgroups;
                    }
                    _staffgroups = value;
                    var newValue = value as FixupCollection<Staffgroup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupStaffgroups;
                    }
                }
            }
        }
        private ICollection<Staffgroup> _staffgroups;
    
        public virtual ICollection<Collaboration> Collaborations
        {
            get
            {
                if (_collaborations == null)
                {
                    var newCollection = new FixupCollection<Collaboration>();
                    newCollection.CollectionChanged += FixupCollaborations;
                    _collaborations = newCollection;
                }
                return _collaborations;
            }
            set
            {
                if (!ReferenceEquals(_collaborations, value))
                {
                    var previousValue = _collaborations as FixupCollection<Collaboration>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCollaborations;
                    }
                    _collaborations = value;
                    var newValue = value as FixupCollection<Collaboration>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCollaborations;
                    }
                }
            }
        }
        private ICollection<Collaboration> _collaborations;
    
        public virtual ICollection<Verse> Verses
        {
            get
            {
                if (_verses == null)
                {
                    var newCollection = new FixupCollection<Verse>();
                    newCollection.CollectionChanged += FixupVerses;
                    _verses = newCollection;
                }
                return _verses;
            }
            set
            {
                if (!ReferenceEquals(_verses, value))
                {
                    var previousValue = _verses as FixupCollection<Verse>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupVerses;
                    }
                    _verses = value;
                    var newValue = value as FixupCollection<Verse>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupVerses;
                    }
                }
            }
        }
        private ICollection<Verse> _verses;
    
        public virtual ICollection<Arc> Arcs
        {
            get
            {
                if (_arcs == null)
                {
                    var newCollection = new FixupCollection<Arc>();
                    newCollection.CollectionChanged += FixupArcs;
                    _arcs = newCollection;
                }
                return _arcs;
            }
            set
            {
                if (!ReferenceEquals(_arcs, value))
                {
                    var previousValue = _arcs as FixupCollection<Arc>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupArcs;
                    }
                    _arcs = value;
                    var newValue = value as FixupCollection<Arc>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupArcs;
                    }
                }
            }
        }
        private ICollection<Arc> _arcs;

        #endregion

        #region Association Fixup
    
        private void FixupStaffgroups(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Staffgroup item in e.NewItems)
                {
                    item.Composition = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Staffgroup item in e.OldItems)
                {
                    if (ReferenceEquals(item.Composition, this))
                    {
                        item.Composition = null;
                    }
                }
            }
        }
    
        private void FixupCollaborations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Collaboration item in e.NewItems)
                {
                    item.Composition = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Collaboration item in e.OldItems)
                {
                    if (ReferenceEquals(item.Composition, this))
                    {
                        item.Composition = null;
                    }
                }
            }
        }
    
        private void FixupVerses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Verse item in e.NewItems)
                {
                    item.Composition = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Verse item in e.OldItems)
                {
                    if (ReferenceEquals(item.Composition, this))
                    {
                        item.Composition = null;
                    }
                }
            }
        }
    
        private void FixupArcs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Arc item in e.NewItems)
                {
                    item.Composition_Id = Id;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Arc item in e.OldItems)
                {
                }
            }
        }

        #endregion

    }
}
