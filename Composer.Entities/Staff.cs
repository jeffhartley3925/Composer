//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Composer.Entities
{
    public partial class Staff
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Clef_Id
        {
            get;
            set;
        }
    
        public virtual short Bar_Id
        {
            get;
            set;
        }
    
        public virtual Nullable<short> Key_Id
        {
            get;
            set;
        }
    
        public virtual int TimeSignature_Id
        {
            get;
            set;
        }
    
        public virtual System.Guid Staffgroup_Id
        {
            get { return _staffgroup_Id; }
            set
            {
                if (_staffgroup_Id != value)
                {
                    if (Staffgroup != null && Staffgroup.Id != value)
                    {
                        Staffgroup = null;
                    }
                    _staffgroup_Id = value;
                }
            }
        }
        private System.Guid _staffgroup_Id;
    
        public virtual int Sequence
        {
            get;
            set;
        }
    
        public virtual string Status
        {
            get;
            set;
        }
    
        public virtual short Index
        {
            get;
            set;
        }

        #endregion

        #region Complex Properties
    
        public virtual Audit Audit
        {
            get { return _audit; }
            set { _audit = value; }
        }
        private Audit _audit = new Audit();

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Measure> Measures
        {
            get
            {
                if (_measures == null)
                {
                    var newCollection = new FixupCollection<Measure>();
                    newCollection.CollectionChanged += FixupMeasures;
                    _measures = newCollection;
                }
                return _measures;
            }
            set
            {
                if (!ReferenceEquals(_measures, value))
                {
                    var previousValue = _measures as FixupCollection<Measure>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMeasures;
                    }
                    _measures = value;
                    var newValue = value as FixupCollection<Measure>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMeasures;
                    }
                }
            }
        }
        private ICollection<Measure> _measures;
    
        public virtual Staffgroup Staffgroup
        {
            get { return _staffgroup; }
            set
            {
                if (!ReferenceEquals(_staffgroup, value))
                {
                    var previousValue = _staffgroup;
                    _staffgroup = value;
                    FixupStaffgroup(previousValue);
                }
            }
        }
        private Staffgroup _staffgroup;
    
        public virtual ICollection<Arc> Arcs
        {
            get
            {
                if (_arcs == null)
                {
                    var newCollection = new FixupCollection<Arc>();
                    newCollection.CollectionChanged += FixupArcs;
                    _arcs = newCollection;
                }
                return _arcs;
            }
            set
            {
                if (!ReferenceEquals(_arcs, value))
                {
                    var previousValue = _arcs as FixupCollection<Arc>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupArcs;
                    }
                    _arcs = value;
                    var newValue = value as FixupCollection<Arc>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupArcs;
                    }
                }
            }
        }
        private ICollection<Arc> _arcs;

        #endregion

        #region Association Fixup
    
        private void FixupStaffgroup(Staffgroup previousValue)
        {
            if (previousValue != null && previousValue.Staffs.Contains(this))
            {
                previousValue.Staffs.Remove(this);
            }
    
            if (Staffgroup != null)
            {
                if (!Staffgroup.Staffs.Contains(this))
                {
                    Staffgroup.Staffs.Add(this);
                }
                if (Staffgroup_Id != Staffgroup.Id)
                {
                    Staffgroup_Id = Staffgroup.Id;
                }
            }
        }
    
        private void FixupMeasures(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Measure item in e.NewItems)
                {
                    item.Staff = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Measure item in e.OldItems)
                {
                    if (ReferenceEquals(item.Staff, this))
                    {
                        item.Staff = null;
                    }
                }
            }
        }
    
        private void FixupArcs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Arc item in e.NewItems)
                {
                    item.Staff_Id = Id;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Arc item in e.OldItems)
                {
                }
            }
        }

        #endregion

    }
}
