//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Composer.Entities
{
    public partial class Verse
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual System.Guid Composition_Id
        {
            get { return _composition_Id; }
            set
            {
                if (_composition_Id != value)
                {
                    if (Composition != null && Composition.Id != value)
                    {
                        Composition = null;
                    }
                    _composition_Id = value;
                }
            }
        }
        private System.Guid _composition_Id;
    
        public virtual short Index
        {
            get;
            set;
        }
    
        public virtual string Text
        {
            get;
            set;
        }
    
        public virtual int Sequence
        {
            get;
            set;
        }
    
        public virtual string Status
        {
            get;
            set;
        }
    
        public virtual Nullable<short> Disposition
        {
            get;
            set;
        }
    
        public virtual string UIHelper
        {
            get;
            set;
        }

        #endregion

        #region Complex Properties
    
        public virtual Audit Audit
        {
            get { return _audit; }
            set { _audit = value; }
        }
        private Audit _audit = new Audit();

        #endregion

        #region Navigation Properties
    
        public virtual Composition Composition
        {
            get { return _composition; }
            set
            {
                if (!ReferenceEquals(_composition, value))
                {
                    var previousValue = _composition;
                    _composition = value;
                    FixupComposition(previousValue);
                }
            }
        }
        private Composition _composition;

        #endregion

        #region Association Fixup
    
        private void FixupComposition(Composition previousValue)
        {
            if (previousValue != null && previousValue.Verses.Contains(this))
            {
                previousValue.Verses.Remove(this);
            }
    
            if (Composition != null)
            {
                if (!Composition.Verses.Contains(this))
                {
                    Composition.Verses.Add(this);
                }
                if (Composition_Id != Composition.Id)
                {
                    Composition_Id = Composition.Id;
                }
            }
        }

        #endregion

    }
}
