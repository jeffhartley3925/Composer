//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Composer.Entities
{
    public partial class Note
    {
        #region Primitive Properties
    
        public virtual System.Guid Id
        {
            get;
            set;
        }
    
        public virtual System.Guid Chord_Id
        {
            get { return _chord_Id; }
            set
            {
                if (_chord_Id != value)
                {
                    if (Chord != null && Chord.Id != value)
                    {
                        Chord = null;
                    }
                    _chord_Id = value;
                }
            }
        }
        private System.Guid _chord_Id;
    
        public virtual Nullable<int> Accidental_Id
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Instrument_Id
        {
            get;
            set;
        }
    
        public virtual short Key_Id
        {
            get;
            set;
        }
    
        public virtual short Vector_Id
        {
            get;
            set;
        }
    
        public virtual Nullable<short> Octave_Id
        {
            get;
            set;
        }
    
        public virtual decimal Duration
        {
            get;
            set;
        }
    
        public virtual int Location_X
        {
            get;
            set;
        }
    
        public virtual int Location_Y
        {
            get;
            set;
        }
    
        public virtual string Pitch
        {
            get;
            set;
        }
    
        public virtual short Type
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsDotted
        {
            get;
            set;
        }
    
        public virtual Nullable<double> StartTime
        {
            get;
            set;
        }
    
        public virtual Nullable<short> Orientation
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IsSpanned
        {
            get;
            set;
        }
    
        public virtual string Status
        {
            get;
            set;
        }
    
        public virtual string Foreground
        {
            get;
            set;
        }
    
        public virtual string Slot
        {
            get;
            set;
        }

        #endregion

        #region Complex Properties
    
        public virtual Audit Audit
        {
            get { return _audit; }
            set { _audit = value; }
        }
        private Audit _audit = new Audit();

        #endregion

        #region Navigation Properties
    
        public virtual Chord Chord
        {
            get { return _chord; }
            set
            {
                if (!ReferenceEquals(_chord, value))
                {
                    var previousValue = _chord;
                    _chord = value;
                    FixupChord(previousValue);
                }
            }
        }
        private Chord _chord;

        #endregion

        #region Association Fixup
    
        private void FixupChord(Chord previousValue)
        {
            if (previousValue != null && previousValue.Notes.Contains(this))
            {
                previousValue.Notes.Remove(this);
            }
    
            if (Chord != null)
            {
                if (!Chord.Notes.Contains(this))
                {
                    Chord.Notes.Add(this);
                }
                if (Chord_Id != Chord.Id)
                {
                    Chord_Id = Chord.Id;
                }
            }
        }

        #endregion

    }
}
